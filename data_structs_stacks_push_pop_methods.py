from array import arrayfrom zipfile import errorclass Node:    def __init__(self, data=None, next=None):        self.data = data        self.next = next    def __repr__(self):        return f'<Node: {self.data}>'class Stack:    def __init__(self):        self._top = None        self._size = 0    def __len__(self):        return self._size    def peek(self):        """        Returns the value of the top node without altering the stack        """        return self._top.data if self._top else None    def push(self, data):        """        Add an element to the stack        Parameters:        - 'data': Data/value being added        Returns: None        """        new_node = Node(data = data)        if not self._top:            self._top = new_node        else:            current_node = self._top            new_node.next = current_node            self._top = new_node        #print(self)        self._size += 1        #except ValueError: print(error)        return    def pop(self):        """        Remove the top node from the stack and return its content        Parameters: None        Returns: The content of the node or None if stack is empty        """        if self._top is None: return None        current_node = self._top        next_node = current_node.next        val = current_node.data        self._top = next_node        del current_node        self._size -=1        return val    def __repr__(self):        current_node = self._top        if not current_node : return (f"<Stack ({self._size} elements): []>")        arr = [current_node.data]        while current_node.next != None:            arr.append(current_node.next.data)            current_node = current_node.next        #print(current_node.data)        #print(current_node.next)        if self._size == 1:            return (f"<Stack ({self._size} element): [{", ".join(map(str, arr))}]>")        else:            return (f"<Stack ({self._size} elements): [{", ".join(map(str, arr))}]>")# push test"""def main():    mystack = Stack()    mystack.push('A')    mystack.push('B')    #mystack.push('C')    print(mystack)main()"""# pop testdef main():    mystack = Stack()    for c in 'ABC':        mystack.push(c)    val = mystack.pop()    val = mystack.pop()    val = mystack.pop()    print(val, mystack)main()